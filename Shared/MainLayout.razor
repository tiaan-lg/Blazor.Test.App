@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_darkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Dense="true" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="@_darkMode"
                             Icon="@Icons.Material.Filled.LightMode" Color="@Color.Inherit" Title="Dark Mode"
                             ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="@Color.Inherit" ToggledTitle="Light Mode" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen"
               Elevation="0"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Mini"
               Breakpoint="Breakpoint.Md"
               PreserveOpenState="true">
        <MudDrawerHeader Dense="true">
            @if (_drawerOpen)
            {
                <MudText Typo="Typo.h6">Blazor Testing</MudText>
            }
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="pa-2" MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _darkMode { get; set; }
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _darkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}